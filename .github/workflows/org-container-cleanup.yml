name: container cleanup

on:
  schedule:
    - cron: "0 3 * * 0" # Every Sunday at 3 AM UTC
  workflow_dispatch:

jobs:
  list-and-clean:
    runs-on: ubuntu-latest
    env:
      ORG: technobureau
    steps:
      - name: Fetch all container packages
        id: packages
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const org = process.env.ORG;
            const per_page = 100;
            let page = 1;
            const names = [];
            while (true) {
              const res = await github.rest.packages.listPackagesForOrganization({
                org,
                package_type: 'container',
                per_page,
                page
              });
              // Log and stop on unexpected responses
              if (!res || typeof res.status === 'number' && res.status >= 400) {
                console.log('Failed to list packages or received error from API:', res && res.status, res && res.data);
                break;
              }
              const data = res.data || [];
              for (const p of data) {
                if (p && p.name) names.push(p.name);
              }
              if (data.length < per_page) break;
              page++;
            }
            const packages = names.join(' ');
            fs.appendFileSync(process.env.GITHUB_OUTPUT, `packages=${packages}\n`);
        env:
          ORG: technobureau

      - name: Delete old versions for each package
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const raw = `${{ steps.packages.outputs.packages }}` || "";
            const pkgs = raw.trim() ? raw.trim().split(/\s+/) : [];
            if (pkgs.length === 0) {
              console.log("No packages found, nothing to dispatch.");
            } else {
              for (const pkg of pkgs) {
                if (!pkg) continue;
                console.log(`Cleaning package: ${pkg}`);
                await github.rest.actions.createWorkflowDispatch({
                  owner: process.env.ORG,
                  repo: context.repo.repo,
                  workflow_id: 'cleanup-package.yml',
                  ref: context.ref,
                  inputs: { pkg }
                });
              }
            }
